// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(uuid()) @map("_id")
  clerkId               String   @unique
  email                 String   @unique
  name                  String?
  goal                  String
  skills                String[]
  learningMode          String[]
  learningSchedule      String
  contentTypePreference String[]
  certificationGoals    String[]

  subscribeToNewsletter Boolean @default(false)
  allowDataCollection   Boolean @default(false)

  roadmap Roadmap[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Roadmap {
  id       String  @id @default(uuid()) @map("_id")
  userGoal String
  prompt   String
  duration String
  months   Month[]

  currentMonth Int
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Month {
  id        String @id @default(uuid()) @map("_id")
  roadmapId String

  month          Int
  title          String
  isCurrentMonth Boolean
  modules        Module[]

  isMonthCompleted Boolean

  roadmap Roadmap @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
}

model Module {
  id      String @id @default(uuid()) @map("_id")
  monthId String

  moduleNumber     Int
  title            String
  dueDate          DateTime
  isCompleted      Boolean
  completionStatus Int

  learningPath LearningPath?
  projects     Project[]
  quizzes      Quiz[]

  certificationCourses CertificationCourse[]

  month Month @relation(fields: [monthId], references: [id], onDelete: Cascade)
}

model LearningPath {
  id       String @id @default(uuid()) @map("_id")
  moduleId String @unique

  subpaths             LearningPathSubpath[]
  interactiveExercises InteractiveExercise[]

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model LearningPathSubpath {
  id             String  @id @default(uuid()) @map("_id")
  learningPathId String
  title          String
  link           String
  sequence       Int
  type           String // article, video, course
  isViewed       Boolean
  isCompleted    Boolean

  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
}

model Project {
  id       String @id @default(uuid()) @map("_id")
  moduleId String

  title              String
  problemStatement   String
  hints              String[]
  checkParameter     String
  uploadedFile       String?
  isProjectCompleted Boolean

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Quiz {
  id       String @id @default(uuid()) @map("_id")
  moduleId String

  title         String
  description   String
  noOfQuestions Int
  questions     QuizQuestion[]

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id     String @id @default(uuid()) @map("_id")
  quizId String

  title               String
  description         String
  sequence            Int
  type                String // mcq, short, long
  options             QuizOption[]
  difficultyLevel     String
  correctOption       String?
  correctOptionNumber Int?
  correctOptionId     String?
  correctAnswer       String?

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model QuizOption {
  id         String @id @default(uuid()) @map("_id")
  questionId String

  option       String
  optionNumber Int
  content      String
  isCorrect    Boolean?
  explanation  String?

  question QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model CertificationCourse {
  id       String @id @default(uuid()) @map("_id")
  moduleId String

  title String
  link  String
  type  String // free, paid

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model InteractiveExercise {
  id             String @id @default(uuid()) @map("_id")
  learningPathId String

  title           String
  description     String
  sequence        Int
  type            String // mcq, short, long
  difficultyLevel String
  correctOption   Int?
  correctAnswer   String?
  options         InteractiveExerciseOption[]
  isCompleted     Boolean                     @default(false)

  learningPath LearningPath @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
}

model InteractiveExerciseOption {
  id         String @id @default(uuid()) @map("_id")
  exerciseId String

  optionNumber Int
  content      String
  isCorrect    Boolean?
  explanation  String?

  exercise InteractiveExercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}
